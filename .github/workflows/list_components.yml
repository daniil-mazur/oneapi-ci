# SPDX-FileCopyrightText: 2020 Intel Corporation
#
# SPDX-License-Identifier: MIT

name: list_components

on:
  push: {}
  workflow_dispatch: {}
  schedule:
    - cron: '0 0 * * *'

env:
  WINDOWS_BASEKIT_URL: https://registrationcenter-download.intel.com/akdlm/irc_nas/17978/w_BaseKit_p_2021.3.0.3221.exe
  WINDOWS_HPCKIT_URL: https://registrationcenter-download.intel.com/akdlm/irc_nas/17940/w_HPCKit_p_2021.3.0.3227.exe
  WINDOWS_IOTKIT_URL: https://registrationcenter-download.intel.com/akdlm/irc_nas/17934/w_IoTKit_p_2021.3.0.1365.exe
  WINDOWS_RENDERKIT_URL: https://registrationcenter-download.intel.com/akdlm/irc_nas/17976/w_RenderKit_p_2021.3.0.802.exe
  LINUX_BASEKIT_URL: https://registrationcenter-download.intel.com/akdlm/irc_nas/17977/l_BaseKit_p_2021.3.0.3219.sh
  LINUX_HPCKIT_URL: https://registrationcenter-download.intel.com/akdlm/irc_nas/17912/l_HPCKit_p_2021.3.0.3230.sh
  LINUX_IOTKIT_URL: https://registrationcenter-download.intel.com/akdlm/irc_nas/17918/l_IoTKit_p_2021.3.0.2811.sh
  LINUX_AIKIT_URL: https://registrationcenter-download.intel.com/akdlm/irc_nas/18040/l_AIKit_p_2021.3.0.1370.sh
  LINUX_DLFDKIT_URL: https://registrationcenter-download.intel.com/akdlm/irc_nas/17944/l_DLFDKit_p_2021.3.0.2064.sh
  LINUX_RENDERKIT_URL: https://registrationcenter-download.intel.com/akdlm/irc_nas/17911/l_RenderKit_p_2021.3.0.807.sh
  MACOS_BASEKIT_URL: https://registrationcenter-download.intel.com/akdlm/irc_nas/17969/m_BaseKit_p_2021.3.0.3043.dmg
  MACOS_HPCKIT_URL: https://registrationcenter-download.intel.com/akdlm/irc_nas/17890/m_HPCKit_p_2021.3.0.3226.dmg
  MACOS_RENDERKIT_URL: https://registrationcenter-download.intel.com/akdlm/irc_nas/17903/m_RenderKit_p_2021.3.0.782.dmg

jobs:
  windows:
    runs-on: windows-latest
    defaults:
      run:
        shell: bash
    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-python@v2
      with:
        python-version: '3.x'
    - name: Intel® oneAPI Base Toolkit
      run: scripts/list_components_windows.bat $WINDOWS_BASEKIT_URL doc\\source\\${{ github.workflow }}\\${{ github.job }}_basekit.txt
    - name: Intel® oneAPI HPC Toolkit
      run: scripts/list_components_windows.bat $WINDOWS_HPCKIT_URL doc\\source\\${{ github.workflow }}\\${{ github.job }}_hpckit.txt
    - name: Intel® oneAPI IoT Toolkit
      run: scripts/list_components_windows.bat $WINDOWS_IOTKIT_URL doc\\source\\${{ github.workflow }}\\${{ github.job }}_iotkit.txt
    - name: Intel® oneAPI Rendering Toolkit
      run: scripts/list_components_windows.bat $WINDOWS_RENDERKIT_URL doc\\source\\${{ github.workflow }}\\${{ github.job }}_renderkit.txt

    - name: Upload artifacts
      uses: actions/upload-artifact@v2
      with:
        name: ${{ github.job }}
        path: doc/source/${{ github.workflow }}/${{ github.job }}_*

  linux:
    runs-on: ubuntu-20.04
    defaults:
      run:
        shell: bash
    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-python@v2
      with:
        python-version: '3.x'
    - name: Intel® oneAPI Base Toolkit
      run: scripts/list_components_linux.sh $LINUX_BASEKIT_URL doc/source/${{ github.workflow }}/${{ github.job }}_basekit.txt
    - name: Intel® oneAPI HPC Toolkit
      run: scripts/list_components_linux.sh $LINUX_HPCKIT_URL doc/source/${{ github.workflow }}/${{ github.job }}_hpckit.txt
    - name: Intel® oneAPI IoT Toolkit
      run: scripts/list_components_linux.sh $LINUX_IOTKIT_URL doc/source/${{ github.workflow }}/${{ github.job }}_iotkit.txt
    - name: Intel® AI Analytics Toolkit
      run: scripts/list_components_linux.sh $LINUX_AIKIT_URL doc/source/${{ github.workflow }}/${{ github.job }}_aikit.txt
    - name: Intel® oneAPI DL Framework Developer Toolkit
      run: scripts/list_components_linux.sh $LINUX_DLFDKIT_URL doc/source/${{ github.workflow }}/${{ github.job }}_dlfdkit.txt
    - name: Intel® oneAPI Rendering Toolkit
      run: scripts/list_components_linux.sh $LINUX_RENDERKIT_URL doc/source/${{ github.workflow }}/${{ github.job }}_renderkit.txt

    - name: Upload artifacts
      uses: actions/upload-artifact@v2
      with:
        name: ${{ github.job }}
        path: doc/source/${{ github.workflow }}/${{ github.job }}_*

  linux_apt:
    runs-on: ubuntu-20.04
    defaults:
      run:
        shell: bash
    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-python@v2
      with:
        python-version: '3.x'
    - name: setup apt repo
      run: scripts/setup_apt_repo_linux.sh
    - name: Intel® oneAPI packages provided in APT repository
      run: scripts/list_components_linux_apt.sh doc/source/${{ github.workflow }}/${{ github.job }}.txt

    - name: Upload artifacts
      uses: actions/upload-artifact@v2
      with:
        name: ${{ github.job }}
        path: doc/source/${{ github.workflow }}/${{ github.job }}.txt

  linux_yum_dnf:
    runs-on: ubuntu-20.04
    container: fedora
    defaults:
      run:
        shell: bash
    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-python@v2
      with:
        python-version: '3.x'
    - name: setup yum/dnf repo
      run: scripts/setup_yum_dnf_repo_linux.sh
    - name: Intel® oneAPI packages provided in YUM/DNF repository
      run: scripts/list_components_linux_dnf.sh doc/source/${{ github.workflow }}/${{ github.job }}.txt

    - name: Upload artifacts
      uses: actions/upload-artifact@v2
      with:
        name: ${{ github.job }}
        path: doc/source/${{ github.workflow }}/${{ github.job }}.txt

  macos:
    runs-on: macos-latest
    defaults:
      run:
        shell: bash
    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-python@v2
      with:
        python-version: '3.x'
    - name: Intel® oneAPI Base Toolkit
      run: scripts/list_components_macos.sh $MACOS_BASEKIT_URL doc/source/${{ github.workflow }}/${{ github.job }}_basekit.txt
    - name: Intel® oneAPI HPC Toolkit
      run: scripts/list_components_macos.sh $MACOS_HPCKIT_URL doc/source/${{ github.workflow }}/${{ github.job }}_hpckit.txt
    - name: Intel® oneAPI Rendering Toolkit
      run: scripts/list_components_macos.sh $MACOS_RENDERKIT_URL doc/source/${{ github.workflow }}/${{ github.job }}_renderkit.txt

    - name: Upload artifacts
      uses: actions/upload-artifact@v2
      with:
        name: ${{ github.job }}
        path: doc/source/${{ github.workflow }}/${{ github.job }}_*

  publish:
    runs-on: ubuntu-20.04
    needs: [windows, linux, linux_apt, linux_yum_dnf, macos]
    defaults:
      run:
        shell: bash
        working-directory: doc
    steps:
    - uses: actions/checkout@v2
    - name: Download artifacts - windows
      uses: actions/download-artifact@v2
      with:
        name: windows
        path: doc/source/${{ github.workflow }}
    - name: Download artifacts - linux
      uses: actions/download-artifact@v2
      with:
        name: linux
        path: doc/source/${{ github.workflow }}
    - name: Download artifacts - linux_apt
      uses: actions/download-artifact@v2
      with:
        name: linux_apt
        path: doc/source/${{ github.workflow }}
    - name: Download artifacts - linux_yum_dnf
      uses: actions/download-artifact@v2
      with:
        name: linux_yum_dnf
        path: doc/source/${{ github.workflow }}
    - name: Download artifacts - macos
      uses: actions/download-artifact@v2
      with:
        name: macos
        path: doc/source/${{ github.workflow }}
    - uses: actions/setup-python@v2
      with:
        python-version: '3.x'
    - name: Install prerequisites
      run: python -m pip install --quiet -r requirements.txt
    - name: Build doc
      run: |
        find source/${{ github.workflow }} -maxdepth 1 -type f ! -name "*apt*" ! -name "*yum*" -exec sed -i -e 1,5d {} \;
        find source/${{ github.workflow }} -maxdepth 1 -type f -name "*windows*" -exec sed -i -e 1,2d {} \; -exec sed -i s"/\r//g" {} \;
        sed -i -e 1,7d source/${{ github.workflow }}/linux_yum_dnf.txt
        make html
    - name: Save built doc as artifact
      uses: actions/upload-artifact@v2
      with:
          name: ${{ github.job }}
          path: doc/build
    - name: Checkout gh-pages
      if: ${{ github.ref == 'refs/heads/master' }}
      uses: actions/checkout@v2
      with:
        ref: gh-pages
        path: gh-pages
    - name: Publish to github pages
      if: ${{ github.ref == 'refs/heads/master' }}
      run: |
          cd ../gh-pages
          rm -rf *
          touch .nojekyll
          cp -r ../doc/build/html/* .
          git config user.name github-actions
          git config user.email github-actions@github.com
          git add .
          git commit -m "Update from github actions"
          git push
